print "GUI VM started\n"

(include library)

;;; Pure DL starts here.

;; C++ will inspect the innards of many of these objects. Any code marked "introspected" must not be changed so that the
;; structure or name of the data changes.

defmacro nil () () ()

;; Introspected.
global color-type (make-type)
;; Keep console from overriding this type for any functions in this script by defining it as a separate local
;; variable. Any function in this file that uses this type will create a closure instead of a global reference.
var color-type color-type
(global Color lambda (r g b)
        ;; Introspected.
        make-instance color-type (vector r g b) nil)
declare Color (I I I)

global blue Color 0 0 255


;; Introspected.
global p2-type (make-type)
var p2-type p2-type
(global P2 lambda (x y)
        ;; Introspected.
        make-instance p2-type (vector x y) nil)
declare P2 (I I)


;; ;;; Extended DL starts here.

;; ;; This will create a constructor named `name'::Identifier for a GUI object of the type specified by
;; ;; `type-name'::Identifier.
;; (defmacro defconstructor (name type-name) (L)
;;   ` (#global (, name) lambda ()
;;              gui-make-instance , (symbol-string type-name)))
;; (declare defconstructor (L)
;;          declare-identifier (infer-and-get-next-argument) ())

;; ;; This will create two functions "_name" and "set-_name". If the name is "_name" then the GUI object member that will
;; ;; be read and written is "name". `name' is an identifier.
;; (defmacro defaccessor (name) (L)
;;   var object (gensym)
;;   var setter-name (intern (concatenate "set-" (symbol-string name)))
;;   var value (gensym)
;;   var member-name cdr symbol-string name
;;   ` (noscope
;;      ;; Getter
;;      (#global (, name) lambda ((, object))
;;               gui-get-member , object , member-name)
;;      ;; Setter
;;      (global (, setter-name) lambda ((, object) (, value))
;;              gui-set-member , object , member-name , value)
;;      ;; Register setter with `set'.
;;      #(extend (set ((, name) (, object)) (, value))
;;        ;; The notorious double quote.
;;        (` ((, setter-name) (, (, object)) (, (, value)))))))
;; (declare defaccessor (L)
;;          (()
;;           ;; Getter
;;           declare-identifier (infer-and-get-next-argument) quote #(I)
;;           ;; Setter
;;           declare-identifier (concatenate "set-" (symbol-string (infer-and-get-next-argument))) quote #(I)))

;; defconstructor Window-Handle window
;; defconstructor Texture texture

;; defaccessor _background-color
;; defaccessor _file
;; defaccessor _position
;; defaccessor _dimensions



;; ;; Start main script.

;; var window (Window-Handle)
;; var knight (Texture)

;; set _background-color window  color-blue

;; set _file knight  "../res/chess/images/knight.png"
;; set _position knight  P2 0 0
;; set _dimensions knight  _dimensions window
